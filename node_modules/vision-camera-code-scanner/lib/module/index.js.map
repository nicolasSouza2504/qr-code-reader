{"version":3,"sources":["index.ts"],"names":["BarcodeFormat","BarcodeValueType","AddressType","EmailType","PhoneType","EncryptionType","scanBarcodes","frame","types","options","__scanCodes"],"mappings":"AAEA;AACA;AACA;AACA,WAAYA,aAAZ;AAkBA;AACA;AACA;;WApBYA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;GAAAA,a,KAAAA,a;;AAqBZ,WAAYC,gBAAZ;AAgBA;AACA;AACA;;WAlBYA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;GAAAA,gB,KAAAA,gB;;AAmBZ,WAAYC,WAAZ;AAMA;AACA;AACA;;WARYA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;GAAAA,W,KAAAA,W;;AAwCZ;AACA;AACA;AACA,WAAYC,SAAZ;AAMA;AACA;AACA;;WARYA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AAgBZ;AACA;AACA;AACA,WAAYC,SAAZ;AAQA;AACA;AACA;;WAVYA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AAgCZ;AACA;AACA;AACA,WAAYC,cAAZ;AAMA;AACA;AACA;;WARYA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;GAAAA,c,KAAAA,c;;AAsJZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAT,CACLC,KADK,EAELC,KAFK,EAGLC,OAHK,EAIM;AACX,YADW,CAEX;AACA;;AACA,SAAOC,WAAW,CAACH,KAAD,EAAQC,KAAR,EAAeC,OAAf,CAAlB;AACD;AAED,cAAc,QAAd","sourcesContent":["import type { Frame } from 'react-native-vision-camera';\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.BarcodeFormat\n */\nexport enum BarcodeFormat {\n  UNKNOWN = -1,\n  ALL_FORMATS = 0,\n  CODE_128 = 1,\n  CODE_39 = 2,\n  CODE_93 = 4,\n  CODABAR = 8,\n  DATA_MATRIX = 16,\n  EAN_13 = 32,\n  EAN_8 = 64,\n  ITF = 128,\n  QR_CODE = 256,\n  UPC_A = 512,\n  UPC_E = 1024,\n  PDF417 = 2048,\n  AZTEC = 4096,\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.BarcodeValueType\n */\nexport enum BarcodeValueType {\n  UNKNOWN = 0,\n  CONTACT_INFO = 1,\n  EMAIL = 2,\n  ISBN = 3,\n  PHONE = 4,\n  PRODUCT = 5,\n  SMS = 6,\n  TEXT = 7,\n  URL = 8,\n  WIFI = 9,\n  GEO = 10,\n  CALENDAR_EVENT = 11,\n  DRIVER_LICENSE = 12,\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Address.AddressType\n */\nexport enum AddressType {\n  UNKNOWN = 0,\n  WORK = 1,\n  HOME = 2,\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Address\n */\nexport interface Address {\n  addressLines?: string[];\n  type?: AddressType;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.PersonName\n */\nexport interface PersonName {\n  first?: string;\n  formattedName?: string;\n  last?: string;\n  middle?: string;\n  prefix?: string;\n  pronunciation?: string;\n  suffix?: string;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.ContactInfo\n */\nexport interface ContactInfo {\n  addresses?: Address[];\n  emails?: Email[];\n  name?: PersonName;\n  organization?: string;\n  phones?: Phone[];\n  title?: string;\n  urls?: string[];\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Email.FormatType\n */\nexport enum EmailType {\n  UNKNOWN = 0,\n  WORK = 1,\n  HOME = 2,\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Email\n */\nexport interface Email {\n  address?: string;\n  body?: string;\n  subject?: string;\n  type?: EmailType;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Phone.FormatType\n */\nexport enum PhoneType {\n  UNKNOWN = 0,\n  WORK = 1,\n  HOME = 2,\n  FAX = 3,\n  MOBILE = 4,\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Phone\n */\nexport interface Phone {\n  number?: string;\n  type?: PhoneType;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Sms\n */\nexport interface Sms {\n  message?: string;\n  phoneNumber?: string;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.UrlBookmark\n */\nexport interface UrlBookmark {\n  title?: string;\n  url?: string;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.WiFi.EncryptionType\n */\nexport enum EncryptionType {\n  OPEN = 1,\n  WPA = 2,\n  WEP = 3,\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.WiFi\n */\nexport interface Wifi {\n  encryptionType?: EncryptionType;\n  password?: string;\n  ssid?: string;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.GeoPoint\n */\nexport interface GeoPoint {\n  lat?: number;\n  lng?: number;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.CalendarDateTime\n */\nexport interface Date {\n  day: number;\n  hours: number;\n  minutes: number;\n  month: number;\n  rawValue: string;\n  seconds: number;\n  year: number;\n  isUtc: boolean;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.CalendarEvent\n */\nexport interface CalendarEvent {\n  description?: string;\n  end?: Date;\n  location?: string;\n  organizer?: string;\n  start?: Date;\n  status?: string;\n  summary?: string;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.DriverLicense\n */\nexport interface DriverLicense {\n  addressCity?: string;\n  addressState?: string;\n  addressStreet?: string;\n  addressZip?: string;\n  birthDate?: string;\n  documentType?: string;\n  expiryDate?: string;\n  firstName?: string;\n  gender?: string;\n  issueDate?: string;\n  issuingCountry?: string;\n  lastName?: string;\n  licenseNumber?: string;\n  middleName?: string;\n}\n\n/**\n * @see https://developer.android.com/reference/android/graphics/Rect.html\n */\nexport interface Rect {\n  bottom: number;\n  left: number;\n  right: number;\n  top: number;\n}\n\n/**\n * @see https://developer.android.com/reference/android/graphics/Point.html\n */\nexport interface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode\n */\nexport type Barcode = {\n  boundingBox?: Rect;\n  cornerPoints?: Point[];\n  displayValue?: string;\n  rawValue?: string;\n  format: BarcodeFormat;\n  content:\n    | {\n        type:\n          | BarcodeValueType.UNKNOWN\n          | BarcodeValueType.ISBN\n          | BarcodeValueType.TEXT;\n        data: string;\n      }\n    | {\n        type: BarcodeValueType.CONTACT_INFO;\n        data: ContactInfo;\n      }\n    | {\n        type: BarcodeValueType.EMAIL;\n        data: Email;\n      }\n    | {\n        type: BarcodeValueType.PHONE;\n        data: Phone;\n      }\n    | {\n        type: BarcodeValueType.SMS;\n        data: Sms;\n      }\n    | {\n        type: BarcodeValueType.URL;\n        data: UrlBookmark;\n      }\n    | {\n        type: BarcodeValueType.WIFI;\n        data: Wifi;\n      }\n    | {\n        type: BarcodeValueType.GEO;\n        data: GeoPoint;\n      }\n    | {\n        type: BarcodeValueType.CALENDAR_EVENT;\n        data: CalendarEvent;\n      }\n    | {\n        type: BarcodeValueType.DRIVER_LICENSE;\n        data: DriverLicense;\n      };\n};\n\nexport interface CodeScannerOptions {\n  /**\n   * checkInverted: `Allows you to also scan white barcode with black backgrounds`\n   */\n  checkInverted?: boolean;\n}\n\n/**\n * Scans barcodes in the passed frame with MLKit\n *\n * @param frame Camera frame\n * @param types Array of barcode types to detect (for optimal performance, use less types)\n * @returns Detected barcodes from MLKit\n */\nexport function scanBarcodes(\n  frame: Frame,\n  types: BarcodeFormat[],\n  options?: CodeScannerOptions\n): Barcode[] {\n  'worklet';\n  // @ts-ignore\n  // eslint-disable-next-line no-undef\n  return __scanCodes(frame, types, options);\n}\n\nexport * from './hook';\n"]}